<!DOCTYPE html>
<html>
<head>
    <meta charset='UTF-8' />
    <title>QUADRITOS</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">
    <link rel="stylesheet" type="text/css" href="/style_game.css">
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js" integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy" crossorigin="anonymous"></script>
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>

    <script>
        let totalPlayer = <%=@players.length%>;
        let currentTurn = 1;
        let rgbValue = '#dee2e6';
        function selected(line) {
            verifySquare(line);
            evaluateCurrentTurn();
            $("#"+line.id).css('stroke', rgbValue);
            $("#"+line.id).removeAttr('onclick');
            currentTurn++;
            evaluateCurrentTurn();
        }

        function verifySquare(line) {
            let values = line.id.split('-');
            let orientation = values[0];
            let positions = values[1].split('_');
            $.ajax({
                type: 'GET',
                url: 'verify-square?positions='+line.id,
                success: function(response) {
                    console.log(response);
                }
            });
            if(orientation === 'H') {
                verifiyHorizontalLineTop(positions);
                verifiyHorizontalLineBotton(positions);
            } else {
                verifyVerticalLineRight(positions);
                verifyVerticalLineLeft(positions);
            }
        }

        function verifiyHorizontalLineTop(positions) {
            let topPositionsH = [];
            let rightPositionsV = [];
            let leftPositionsV = [];
            topPositionsH[0] = positions[0];
            topPositionsH[1] = positions[1];
            topPositionsH[2] = (positions[2] - 50) + "";
            topPositionsH[3] = (positions[3] - 50) + "";
            rightPositionsV[0] = positions[1];
            rightPositionsV[1] = positions[1];
            rightPositionsV[2] = (positions[2] - 50) + "";
            rightPositionsV[3] = positions[3];
            leftPositionsV[0] = positions[0];
            leftPositionsV[1] = positions[0];
            leftPositionsV[2] = (positions[2] - 50) + "";
            leftPositionsV[3] = positions[3];
            let topIdH = "H-" + topPositionsH[0] + "_" + topPositionsH[1] + "_" + topPositionsH[2] + "_" +topPositionsH[3];
            let rightIdV = "V-" + rightPositionsV[0] + "_" + rightPositionsV[1] + "_" + rightPositionsV[2] + "_" + rightPositionsV[3];
            let leftIdV = "V-" + leftPositionsV[0] + "_" + leftPositionsV[1] + "_" + leftPositionsV[2] + "_" + leftPositionsV[3];
            let tagTop = document.getElementById(topIdH);
            let tagRight = document.getElementById(rightIdV);
            let tagLeft = document.getElementById(leftIdV);
            if ((tagTop !== null) && (tagRight !== null) && (tagLeft !== null)) {
                if (($("#"+topIdH).css('stroke') !== "rgb(107, 213, 225)")
                   && ($("#"+rightIdV).css('stroke') !== "rgb(107, 213, 225)")
                   && ($("#"+leftIdV).css('stroke') !== "rgb(107, 213, 225)")) {
                    let score;
                    switch (currentTurn) {
                        case 0:
                            score = Number($("#score-"+totalPlayer).text());
                            score++;
                            $("#score-"+totalPlayer).text(score+"");
                            break;
                        default:
                            score = Number($("#score-"+currentTurn).text());
                            score++;
                            $("#score-"+currentTurn).text(score+"");
                            break;
                    }
                }
            }
        }

        function verifiyHorizontalLineBotton(positions) {
            let bottonPositionsH = [];
            let rightPositionsV = [];
            let leftPositionsV = [];
            bottonPositionsH[0] = positions[0];
            bottonPositionsH[1] = positions[1];
            bottonPositionsH[2] = (positions[2] - 50 + 100) + "";
            bottonPositionsH[3] = (positions[3] - 50 + 100) + "";
            rightPositionsV[0] = positions[1];
            rightPositionsV[1] = positions[1];
            rightPositionsV[2] = positions[2];
            rightPositionsV[3] = (positions[3] - 50 + 100) + "";
            leftPositionsV[0] = positions[0];
            leftPositionsV[1] = positions[0];
            leftPositionsV[2] = positions[2];
            leftPositionsV[3] = (positions[3] - 50 + 100) + "";
            let bottonIdH = "H-" + bottonPositionsH[0] + "_" + bottonPositionsH[1] + "_" + bottonPositionsH[2] + "_" +bottonPositionsH[3];
            let rightIdV = "V-" + rightPositionsV[0] + "_" + rightPositionsV[1] + "_" + rightPositionsV[2] + "_" + rightPositionsV[3];
            let leftIdV = "V-" + leftPositionsV[0] + "_" + leftPositionsV[1] + "_" + leftPositionsV[2] + "_" + leftPositionsV[3];
            let tagBotton = document.getElementById(bottonIdH);
            let tagRight = document.getElementById(rightIdV);
            let tagLeft = document.getElementById(leftIdV);
            if ((tagBotton !== null) && (tagRight !== null) && (tagLeft !== null)) {
                if (($("#"+bottonIdH).css('stroke') !== "rgb(107, 213, 225)")
                   && ($("#"+rightIdV).css('stroke') !== "rgb(107, 213, 225)")
                   && ($("#"+leftIdV).css('stroke') !== "rgb(107, 213, 225)")) {
                    let score;
                    switch (currentTurn) {
                        case 0:
                            score = Number($("#score-"+totalPlayer).text());
                            score++;
                            $("#score-"+totalPlayer).text(score+"");
                            break;
                        default:
                            score = Number($("#score-"+currentTurn).text());
                            score++;
                            $("#score-"+currentTurn).text(score+"");
                            break;
                    }
                }
            }
        }

        function verifyVerticalLineRight(positions) {
            let topPositionsH = [];
            let bottonPositionsH = [];
            let rightPositionsV = [];
            topPositionsH[0] = positions[0];
            topPositionsH[1] = (positions[0] - 0 + 50) +"";
            topPositionsH[2] = positions[2];
            topPositionsH[3] = (positions[3] - 50) + "";
            bottonPositionsH[0] = positions[1];
            bottonPositionsH[1] = (positions[1] - 0 + 50) +"";
            bottonPositionsH[2] = (positions[2] - 0 + 50) +"";
            bottonPositionsH[3] = positions[3];
            rightPositionsV[0] = (positions[0] - 50 + 100) + "";
            rightPositionsV[1] = (positions[1] - 50 + 100) + "";
            rightPositionsV[2] = positions[2];
            rightPositionsV[3] = positions[3];
            let topIdH = "H-" + topPositionsH[0] + "_" + topPositionsH[1] + "_" + topPositionsH[2] + "_" +topPositionsH[3];
            let bottonIdH = "H-" + bottonPositionsH[0] + "_" + bottonPositionsH[1] + "_" + bottonPositionsH[2] + "_" + bottonPositionsH[3];
            let rightIdV = "V-" + rightPositionsV[0] + "_" + rightPositionsV[1] + "_" + rightPositionsV[2] + "_" + rightPositionsV[3];
            let tagTop = document.getElementById(topIdH);
            let tagBotton = document.getElementById(bottonIdH);
            let tagRight = document.getElementById(rightIdV);
            if ((tagTop !== null) && (tagBotton !== null) && (tagRight !== null)) {
                if (($("#"+topIdH).css('stroke') !== "rgb(107, 213, 225)")
                   && ($("#"+bottonIdH).css('stroke') !== "rgb(107, 213, 225)")
                   && ($("#"+rightIdV).css('stroke') !== "rgb(107, 213, 225)")) {
                    let score;
                    switch (currentTurn) {
                        case 0:
                            score = Number($("#score-"+totalPlayer).text());
                            score++;
                            $("#score-"+totalPlayer).text(score+"");
                            break;
                        default:
                            score = Number($("#score-"+currentTurn).text());
                            score++;
                            $("#score-"+currentTurn).text(score+"");
                            break;
                    }
                }
            }
        }

        function verifyVerticalLineLeft(positions) {
            let topPositionsH = [];
            let bottonPositionsH = [];
            let leftPositionsV = [];
            topPositionsH[0] = (positions[0] - 50) +""
            topPositionsH[1] = positions[1];
            topPositionsH[2] = positions[2];
            topPositionsH[3] = (positions[3] - 50) + "";
            bottonPositionsH[0] = positions[0];
            bottonPositionsH[1] = positions[1];
            bottonPositionsH[2] = (positions[2] - 0 + 50) +"";
            bottonPositionsH[3] = positions[3];
            leftPositionsV[0] = (positions[0] - 50) + "";
            leftPositionsV[1] = (positions[1] - 50) + "";
            leftPositionsV[2] = positions[2];
            leftPositionsV[3] = positions[3];
            let topIdH = "H-" + topPositionsH[0] + "_" + topPositionsH[1] + "_" + topPositionsH[2] + "_" +topPositionsH[3];
            let bottonIdH = "H-" + bottonPositionsH[0] + "_" + bottonPositionsH[1] + "_" + bottonPositionsH[2] + "_" + bottonPositionsH[3];
            let leftIdV = "V-" + leftPositionsV[0] + "_" + leftPositionsV[1] + "_" + leftPositionsV[2] + "_" + leftPositionsV[3];
            let tagTop = document.getElementById(topIdH);
            let tagBotton = document.getElementById(bottonIdH);
            let tagLeft = document.getElementById(leftIdV);
            if ((tagTop !== null) && (tagBotton !== null) && (tagLeft !== null)) {
                if (($("#"+topIdH).css('stroke') !== "rgb(107, 213, 225)")
                   && ($("#"+bottonIdH).css('stroke') !== "rgb(107, 213, 225)")
                   && ($("#"+leftIdV).css('stroke') !== "rgb(107, 213, 225)")) {
                    let score;
                    switch (currentTurn) {
                        case 0:
                            score = Number($("#score-"+totalPlayer).text());
                            score++;
                            $("#score-"+totalPlayer).text(score+"");
                            break;
                        default:
                            score = Number($("#score-"+currentTurn).text());
                            score++;
                            $("#score-"+currentTurn).text(score+"");
                            break;
                    }
                }
            }
        }

        function evaluateCurrentTurn() {
            let classRow;
            for(let i = 1; i <= totalPlayer; i++) {
                $("#user-"+i).removeAttr('class');
                $("#user-"+i).attr('class', '');
                $('#user-'+i)[0].className = '';
            }
            switch(currentTurn) {
                case 1:
                    classRow = 'bg-primary';
                    rgbValue = '#007bff';
                    $("#user-"+currentTurn).addClass(classRow);
                    break;
                case 2:
                    classRow = 'bg-success';
                    rgbValue = '#28a745';
                    $("#user-"+currentTurn).addClass(classRow);
                    break;
                case 3:
                    classRow = 'bg-danger';
                    rgbValue = '#dc3545';
                    $("#user-"+currentTurn).addClass(classRow);
                    break;
                case 4:
                    classRow = 'bg-warning';
                    rgbValue = '#ffc107';
                    $("#user-"+currentTurn).addClass(classRow);
                    break;
                default:
                    currentTurn = 0;
            }
            if(currentTurn >= totalPlayer)
                currentTurn = 0;
        }

        function start () {
            classRow = 'bg-primary';
            $("#user-1").addClass('bg-primary');
        }

        window.onload=start;
    </script>

</head>

<body style="background:rgb(107,213,225)">
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <div class="navbar-brand"><img src="logo.jpg" height="42" width="42"/></div>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav">
                <li class="nav-item active">
                    <a class="nav-link" href="/">Pagina principal</a>
                </li>
                <li class="nav-item active">
                    <a class="nav-link" href="#">Configuraciones</a>
                </li>
                <li class="nav-item">
                    <div class="nav-link disabled">Bienvenido <%=@username%></div>
                </li>
            </ul>
        </div>
    </nav>
    <div class="container main-game">
        <div class="row">
            <div class="col-sm">
                <svg viewbox="0 0 500 500" width="100%" height="100%" preserveAspectRatio="xMinYMin meet">
                    <% @board.getHorizontalLines.each do |line| %>
                        <line x1="<%=line.getPosX1%>" x2="<%=line.getPosX2%>" y1="<%=line.getPosY1%>" y2="<%=line.getPosY2%>" onclick="selected(this)" id="H-<%=line.getPositions%>" style="stroke:rgb(107,213,225);stroke-width:9"/>
                    <% end %>
                    <% @board.getVerticalLines.each do |line| %>
                        <line x1="<%=line.getPosX1%>" x2="<%=line.getPosX2%>" y1="<%=line.getPosY1%>" y2="<%=line.getPosY2%>" onclick="selected(this)" id="V-<%=line.getPositions%>" style="stroke:rgb(107,213,225);stroke-width:9"/>
                    <% end %>
                    <% @board.getPoints.each do |point| %>
                        <circle cx="<%=point.getPosX%>" cy="<%=point.getPosY%>" r="<%=point.getRadio%>"/>
                    <% end %>
                </svg>
            </div>
            <div class="col-sm scores">
                <table class="table table-sm">
                    <thead>
                        <tr>
                            <th scope="col">#</th>
                            <th scope="col">Nombre</th>
                            <th scope="col">Puntaje</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% @players.each do |player| %>
                            <tr id="user-<%= player[0]%>">
                                <td scope="row"><%= player[0]%></td>
                                <td><%= player[1].getName%></td>
                                <td id="score-<%= player[0]%>"><%= player[1].getScore%></td>
                            </tr>
                        <% end %>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</body>
</html>